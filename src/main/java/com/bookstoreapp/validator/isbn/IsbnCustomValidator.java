package com.bookstoreapp.validator.isbn;

import jakarta.validation.ConstraintValidator;
import jakarta.validation.ConstraintValidatorContext;

import java.util.regex.Pattern;

public class IsbnCustomValidator implements ConstraintValidator<IsbnConstraint, String> {
    private static final String PATTERN_OF_ISBN = "^(?=(?:\\D*\\d){10}(?:(?:\\D*\\d){3})?$)[\\d-]+$";
    /*
Это регулярное выражение используется для проверки строки на соответствие шаблону, который включает в себя последовательность из 10 цифр, разделённых возможными нецифровыми символами (например, дефисами). Однако, последняя группа из трёх цифр может быть опциональной.

^: Обозначает начало строки.
(?=: Это начало положительного опережающего просмотра (positive lookahead), что означает, что сопоставление будет происходить только если после этой позиции следует указанный шаблон, но сам этот шаблон не входит в результат сопоставления.
(?:\D*\d){10}: Этот шаблон означает последовательность из 10 цифр (\d), которые могут быть разделены любым количеством нецифровых символов (\D*).
(?:(?:\D*\d){3})?: Эта часть указывает на группу из трёх цифр, опциональную (знак ? в конце). Опять же, это может быть разделено любым количеством нецифровых символов.
$: Обозначает конец строки.
[\d-]+: Это фактический шаблон для сопоставления, который включает в себя цифры и дефисы. [\d-] означает любую цифру или дефис, а + указывает, что должен быть один или более таких символов.
Таким образом, данное регулярное выражение будет соответствовать строкам, содержащим последовательность из 10 цифр, возможно разделённых дефисами, с возможным включением группы из трёх цифр в конце.
    */

    @Override
    public boolean isValid(String isbn, ConstraintValidatorContext constraintValidatorContext) {
        return isbn != null && Pattern.compile(PATTERN_OF_ISBN)
                .matcher(isbn)
                .matches();
    }
}
